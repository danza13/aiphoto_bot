# bot.py

# ==============================
# –ë–õ–û–ö 1: –Ü–º–ø–æ—Ä—Ç–∏ —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
# ==============================
import os
import json
import time
import hmac
import hashlib
from uuid import uuid4
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import uvicorn

load_dotenv()

# Telegram
BOT_TOKEN = os.getenv('TELEGRAM_TOKEN')

# WayForPay & –≤–∞—à –¥–æ–º–µ–Ω
WFP_ACCOUNT     = os.getenv('WFP_MERCHANT_ACCOUNT')
WFP_SECRET      = os.getenv('WFP_SECRET_KEY')
WFP_DOMAIN      = os.getenv('WFP_DOMAIN')            # https://aiphoto-bot.onrender.com
WFP_CALLBACK    = os.getenv('WFP_CALLBACK_URL')      # https://‚Ä¶/wfp-callback
RETURN_URL      = os.getenv('WFP_RETURN_URL')        # https://‚Ä¶/return

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è
USERS_FILE    = os.getenv('USERS_FILE_PATH',    '/data/users.json')
PAYMENTS_FILE = os.getenv('PAYMENTS_FILE_PATH', '/data/payments.json')

bot = Bot(token=BOT_TOKEN)
dp  = Dispatcher(bot, storage=MemoryStorage())
app = FastAPI()

# ======================
# –ë–õ–û–ö 2: FSM-—Å—Ç–∞–Ω–∏
# ======================
class Session(StatesGroup):
    waiting_amount = State()

# ====================================
# –ë–õ–û–ö 3: –†–æ–±–æ—Ç–∞ –∑ JSON (users + payments)
# ====================================
def load_json(path):
    if not os.path.exists(path):
        return {}
    with open(path, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_json(path, data):
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ‚Äî users.json ‚Äî
def ensure_user(uid, referrer=None):
    users = load_json(USERS_FILE)
    if uid not in users:
        users[uid] = {
            'balance': 0,
            'referral_link': f"{WFP_DOMAIN}/?ref={uid}",
            'referrer': referrer or ''
        }
        save_json(USERS_FILE, users)
    return users[uid]

def change_balance(uid, delta):
    users = load_json(USERS_FILE)
    users[uid]['balance'] += delta
    save_json(USERS_FILE, users)

# ‚Äî payments.json ‚Äî
def record_payment(order_ref, uid, amount):
    pays = load_json(PAYMENTS_FILE)
    pays[order_ref] = {'user_id': uid, 'amount': amount}
    save_json(PAYMENTS_FILE, pays)

def pop_payment(order_ref):
    pays = load_json(PAYMENTS_FILE)
    rec = pays.pop(order_ref, None)
    save_json(PAYMENTS_FILE, pays)
    return rec

# ============================================
# –ë–õ–û–ö 4: WayForPay-–ø—ñ–¥–ø–∏—Å–∏
# ============================================
def make_signature(fields: list) -> str:
    data = ';'.join(str(f) for f in fields)
    return hmac.new(WFP_SECRET.encode(), data.encode('utf-8'), hashlib.md5).hexdigest()

# =============================================
# –ë–õ–û–ö 5: FastAPI-–µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏
# =============================================
@app.get("/pay", response_class=HTMLResponse)
async def pay_page(order_ref: str, amount: float):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ WebApp: –∞–≤—Ç–æ—Å–∞–±–º—ñ—Ç —Ñ–æ—Ä–º–∏ WayForPay"""
    params = {
        'merchantAccount':    WFP_ACCOUNT,
        'merchantDomainName': WFP_DOMAIN,
        'orderReference':     order_ref,
        'orderDate':          int(time.time()),
        'amount':             amount,
        'currency':           'UAH',
        'productName[]':      ['Top-up'],
        'productCount[]':     [1],
        'productPrice[]':     [amount],
        'serviceUrl':         WFP_CALLBACK,
        'returnUrl':          RETURN_URL
    }
    sig = make_signature([
        params['merchantAccount'], params['merchantDomainName'],
        params['orderReference'], params['orderDate'],
        params['amount'], params['currency'],
        *params['productName[]'],
        *params['productCount[]'],
        *params['productPrice[]']
    ])
    params['merchantSignature'] = sig

    inputs = "\n".join(
        f'<input type="hidden" name="{k}" value="{v}"/>' for k,v in params.items()
    )
    html = f"""
    <html><body onload="document.forms[0].submit()">
      <form method="post" action="https://secure.wayforpay.com/pay" accept-charset="utf-8">
        {inputs}
      </form>
    </body></html>
    """
    return html

@app.post("/wfp-callback")
async def wfp_callback(req: Request):
    data = await req.json()
    # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É
    sig = make_signature([
        data['merchantAccount'], data['orderReference'],
        data['amount'], data['currency'],
        data['authCode'], data['cardPan'],
        data['transactionStatus'], data['reasonCode']
    ])
    ok = sig == data.get('merchantSignature') and data['transactionStatus']=='Approved'
    status = 'accept' if ok else 'reject'
    # —Ñ–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å WayForPay
    answer = {
        'orderReference': data['orderReference'],
        'status': status,
        'time': int(time.time()),
        'signature': make_signature([data['orderReference'], status, int(time.time())])
    }

    if not ok:
        return answer

    # —É—Å–ø—ñ—à–Ω–æ: –∑–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    rec = pop_payment(data['orderReference'])
    if not rec:
        return answer  # –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ

    uid    = str(rec['user_id'])
    amount = float(rec['amount'])
    # –Ω–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∞–Ω—Å
    change_balance(uid, amount)
    # –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    users = load_json(USERS_FILE)
    ref = users[uid]['referrer']
    if ref:
        change_balance(str(ref), amount * 0.1)

    return answer

# ======================================
# –ë–õ–û–ö 6: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
# ======================================
def kb_main():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì∏ –ü–æ—á–∞—Ç–∏ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—é"))
    kb.add(KeyboardButton("üí∞ –ú—ñ–π –±–∞–ª–∞–Ω—Å"))
    kb.add(KeyboardButton("ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞"))
    return kb

def kb_balance():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ûï –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å"))
    kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_back():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é"))
    return kb

# =====================================
# –ë–õ–û–ö 7: Telegram-—Ö–µ–Ω–¥–ª–µ—Ä–∏
# =====================================
@dp.message_handler(commands=['start'])
async def cmd_start(msg: types.Message):
    ref = None
    if msg.get_args().startswith("ref="):
        ref = msg.get_args().split("ref=")[1]
    ensure_user(str(msg.from_user.id), referrer=ref)
    await msg.answer("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=kb_main())

@dp.message_handler(lambda m: m.text=="üí∞ –ú—ñ–π –±–∞–ª–∞–Ω—Å")
async def show_balance(msg: types.Message):
    u = load_json(USERS_FILE)[str(msg.from_user.id)]
    await msg.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {u['balance']} –≥—Ä–Ω", reply_markup=kb_balance())

@dp.message_handler(lambda m: m.text=="üîô –ù–∞–∑–∞–¥")
async def back_to_main(msg: types.Message):
    await msg.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=kb_main())

@dp.message_handler(lambda m: m.text=="‚ûï –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å")
async def topup_start(msg: types.Message):
    await Session.waiting_amount.set()
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (UAH):", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=Session.waiting_amount)
async def process_amount(msg: types.Message, state: FSMContext):
    try:
        amount = float(msg.text)
    except ValueError:
        return await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É.")
    order_ref = str(uuid4())
    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    record_payment(order_ref, msg.from_user.id, amount)
    # –ª—ñ–Ω–∫ –Ω–∞ WebApp
    wa_url = f"{WFP_DOMAIN}/pay?order_ref={order_ref}&amount={amount}"
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç–∏ –±–∞–ª–∞–Ω—Å", web_app=WebAppInfo(url=wa_url))
    )
    await msg.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –æ–ø–ª–∞—Ç—É:", reply_markup=kb)
    await state.finish()

@dp.message_handler(lambda m: m.text=="ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞")
async def referral(msg: types.Message):
    u = load_json(USERS_FILE)[str(msg.from_user.id)]
    await msg.answer(
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞:\n{u['referral_link']}\n\n"
        "–ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ ‚Äî –æ—Ç—Ä–∏–º—É–π—Ç–µ 10% –≤—ñ–¥ –∫–æ–∂–Ω–æ–≥–æ —ó—Ö –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è!",
        reply_markup=kb_main()
    )

@dp.message_handler(lambda m: m.text=="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é")
async def back_from_payment(msg: types.Message):
    await msg.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=kb_main())

# ===========================================
# –ë–õ–û–ö 8: –ó–∞–ø—É—Å–∫ Aiogram + FastAPI
# ===========================================
if __name__ == "__main__":
    import threading
    def run_api():
        uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
    threading.Thread(target=run_api).start()
    executor.start_polling(dp, skip_updates=True)
