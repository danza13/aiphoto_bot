# bot.py

# ==============================
# –ë–õ–û–ö 1: –Ü–º–ø–æ—Ä—Ç–∏ —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
# ==============================
import os
import json
import time
import hmac
import hashlib
from uuid import uuid4
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import uvicorn

load_dotenv()

BOT_TOKEN           = os.getenv('TELEGRAM_TOKEN')
WFP_ACCOUNT         = os.getenv('WFP_MERCHANT_ACCOUNT')
WFP_SECRET          = os.getenv('WFP_SECRET_KEY')
WFP_DOMAIN          = os.getenv('WFP_DOMAIN')
WFP_SERVICE_URL     = os.getenv('WFP_CALLBACK_URL')
RETURN_URL          = os.getenv('WFP_RETURN_URL')  # –∫—É–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–µ—Ä–Ω–µ—Ç—å—Å—è –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
app = FastAPI()

USERS_FILE = 'users.json'

# ======================
# –ë–õ–û–ö 2: –°—Ç–∞–Ω–∏ FSM
# ======================
class Session(StatesGroup):
    waiting_amount = State()

# ====================================
# –ë–õ–û–ö 3: –†–æ–±–æ—Ç–∞ –∑ JSON (storage)
# ====================================
def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    with open(USERS_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_users(data):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def ensure_user(user_id, referrer=None):
    data = load_users()
    uid = str(user_id)
    if uid not in data:
        data[uid] = {
            'balance': 0,
            'referral_link': f"{WFP_DOMAIN}/?ref={uid}",
            'referrer': referrer or ''
        }
        save_users(data)
    return data[uid]

def change_balance(user_id, amount):
    data = load_users()
    uid = str(user_id)
    data[uid]['balance'] += amount
    save_users(data)

# ============================================
# –ë–õ–û–ö 4: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è WayForPay-–ø—ñ–¥–ø–∏—Å—ñ–≤ & URL
# ============================================
def make_signature(fields: list) -> str:
    """HMAC_MD5 –≤—ñ–¥ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤ —á–µ—Ä–µ–∑ ';'"""
    data = ';'.join(str(f) for f in fields)
    return hmac.new(WFP_SECRET.encode(), data.encode('utf-8'), hashlib.md5).hexdigest()

def create_payment_link(user_id: int, amount: float):
    order_ref   = str(uuid4())
    order_date  = int(time.time())
    # —Ñ–æ—Ä–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    params = {
        'merchantAccount':       WFP_ACCOUNT,
        'merchantDomainName':    WFP_DOMAIN,
        'orderReference':        order_ref,
        'orderDate':             order_date,
        'amount':                amount,
        'currency':              'UAH',
        'productName[]':         ['Top-up balance'],
        'productCount[]':        [1],
        'productPrice[]':        [amount],
        'serviceUrl':            WFP_SERVICE_URL,
        'returnUrl':             RETURN_URL
    }
    # –ø—ñ–¥–ø–∏—Å
    signature = make_signature([
        params['merchantAccount'], params['merchantDomainName'],
        params['orderReference'], params['orderDate'],
        params['amount'], params['currency'],
        *params['productName[]'], *params['productCount[]'], *params['productPrice[]']
    ])
    params['merchantSignature'] = signature
    # –≥–µ–Ω–µ—Ä—É—î–º–æ HTML-—Ñ–æ—Ä–º—É
    inputs = '\n'.join(
        f'<input type="hidden" name="{k}" value="{v}"/>' for k, v in params.items()
    )
    form = f"""
    <html><body onload="document.forms[0].submit()">
      <form method="post" action="https://secure.wayforpay.com/pay" accept-charset="utf-8">
        {inputs}
      </form>
    </body></html>
    """
    return form

# =============================================
# –ë–õ–û–ö 5: FastAPI-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è serviceUrl
# =============================================
@app.post("/wfp-callback")
async def wfp_callback(req: Request):
    data = await req.json()
    # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É –≤—ñ–¥ WayForPay
    signature = make_signature([
        data['merchantAccount'], data['orderReference'],
        data['amount'], data['currency'],
        data['authCode'], data['cardPan'],
        data['transactionStatus'], data['reasonCode']
    ])
    if signature != data.get('merchantSignature') or data['transactionStatus'] != 'Approved':
        return {'orderReference': data['orderReference'], 'status': 'reject', 'time': int(time.time()), 'signature': make_signature([data['orderReference'], 'reject', int(time.time())])}
    # —É—Å–ø—ñ—à–Ω–∏–π –ø–ª–∞—Ç—ñ–∂
    # –∑–Ω–∞—Ö–æ–¥–∏–º–æ user_id –∑–∞ orderReference ‚Äî –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ orderReference == user_id
    user_id = int(data['orderReference'].split('-')[0])  # –∞–±–æ —ñ–Ω—à–∞ –ª–æ–≥—ñ–∫–∞
    amount = float(data['amount'])
    # –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    change_balance(user_id, amount)
    # –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    users = load_users()
    ref = users[str(user_id)]['referrer']
    if ref:
        bonus = amount * 0.1
        change_balance(int(ref), bonus)
    return {'orderReference': data['orderReference'], 'status': 'accept', 'time': int(time.time()), 'signature': make_signature([data['orderReference'], 'accept', int(time.time())])}

# ======================================
# –ë–õ–û–ö 6: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –º–µ–Ω—é
# ======================================
def kb_main():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì∏ –ü–æ—á–∞—Ç–∏ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—é"))
    kb.add(KeyboardButton("üí∞ –ú—ñ–π –±–∞–ª–∞–Ω—Å"))
    kb.add(KeyboardButton("ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞"))
    return kb

def kb_balance():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ûï –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å"))
    kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_back():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é"))
    return kb

# =====================================
# –ë–õ–û–ö 7: Telegram-—Ö–µ–Ω–¥–ª–µ—Ä–∏
# =====================================
@dp.message_handler(commands=['start'])
async def cmd_start(msg: types.Message):
    # –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —î —Ä–µ—Ñ–µ—Ä–µ—Ä
    ref = None
    if msg.get_args().startswith("ref="):
        ref = msg.get_args().split("ref=")[1]
    ensure_user(msg.from_user.id, referrer=ref)
    await msg.answer("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=kb_main())

@dp.message_handler(lambda m: m.text == "üí∞ –ú—ñ–π –±–∞–ª–∞–Ω—Å")
async def show_balance(msg: types.Message):
    user = load_users()[str(msg.from_user.id)]
    await msg.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –≥—Ä–Ω", reply_markup=kb_balance())

@dp.message_handler(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(msg: types.Message):
    await msg.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=kb_main())

@dp.message_handler(lambda m: m.text == "‚ûï –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å")
async def topup_start(msg: types.Message):
    await Session.waiting_amount.set()
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (UAH):", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=Session.waiting_amount)
async def process_amount(msg: types.Message, state: FSMContext):
    try:
        amount = float(msg.text)
    except ValueError:
        return await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —á–∏—Å–ª–æ–≤—É —Å—É–º—É.")
    # –∑–≥–µ–Ω–µ—Ä—É—î–º–æ —Ñ–æ—Ä–º—É —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ
    html = create_payment_link(msg.from_user.id, amount)
    await msg.answer("–ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –¥–ª—è –æ–ø–ª–∞—Ç–∏:", reply_markup=kb_back())
    await msg.answer(html, parse_mode='HTML')
    await state.finish()

@dp.message_handler(lambda m: m.text == "ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞")
async def referral(msg: types.Message):
    user = load_users()[str(msg.from_user.id)]
    link = user['referral_link']
    text = (
        "–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞:\n"
        f"{link}\n\n"
        "–ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ ‚Äî –æ—Ç—Ä–∏–º—É–π—Ç–µ 10% –≤—ñ–¥ –∫–æ–∂–Ω–æ–≥–æ —ó—Ö –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è!"
    )
    await msg.answer(text, reply_markup=kb_main())

@dp.message_handler(lambda m: m.text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é")
async def back_from_payment(msg: types.Message):
    await msg.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=kb_main())

# ===========================================
# –ë–õ–û–ö 8: –ó–∞–ø—É—Å–∫ Aiogram —ñ FastAPI —Ä–∞–∑–æ–º
# ===========================================
if __name__ == "__main__":
    # –æ–¥–Ω–æ—á–∞—Å–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ FastAPI (uvicorn) —ñ Aiogram
    import threading
    def run_api():
        uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
    threading.Thread(target=run_api).start()
    executor.start_polling(dp, skip_updates=True)
